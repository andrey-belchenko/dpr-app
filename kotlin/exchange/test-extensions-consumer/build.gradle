plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.7.22'
    id 'org.jetbrains.kotlin.plugin.allopen' version '1.7.22'
    id 'io.quarkus'
    id 'com.github.johnrengelman.shadow'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    api("io.opentelemetry:opentelemetry-api:1.17.0")
    api(libs.micrometer.core)
    implementation("io.quarkus:quarkus-opentelemetry")
    implementation("io.quarkus:quarkus-micrometer")
    implementation(libs.quarkus.micrometer.registry.otlp)

    implementation("io.quarkus:quarkus-kotlin")
    implementation("io.quarkus:quarkus-resteasy-reactive-jackson")
    implementation("io.quarkus:quarkus-config-yaml")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("io.quarkus:quarkus-arc")
    implementation("io.quarkus:quarkus-kafka-streams")
    implementation("io.quarkus:quarkus-vertx")
    implementation("io.quarkus:quarkus-kafka-client")

    implementation(libs.kotlinx.serialization.json)

//    implementation(libs.mongodb.driver.sync)
    implementation("org.mongodb:mongodb-driver-sync:4.8.2")
    implementation(libs.postgresql)
    implementation(libs.hikari.cp)
    implementation(libs.bundles.jena)
    implementation(libs.jackson.module.java.time)
    implementation(libs.jackson.module.kotlin)
    implementation("io.smallrye.reactive:smallrye-mutiny-vertx-kafka-client") {
        exclude group: "org.slf4j", module: "slf4j-log4j12"
    }
    implementation(files('../exchange-platform-extension-libraries/cc.datafabric.platform.app-transport-2.8.0-SNAPSHOT.jar'))
    implementation(files('../exchange-platform-extension-libraries/cc.datafabric.platform.audit-logger-2.8.0-SNAPSHOT.jar'))
    implementation(files('../exchange-platform-extension-libraries/cc.datafabric.platform.common-2.8.0-SNAPSHOT.jar'))
    implementation(files('../exchange-platform-extension-libraries/cc.datafabric.platform.core-2.8.0-SNAPSHOT.jar'))
    implementation(files('../exchange-platform-extension-libraries/cc.datafabric.platform.datalayer-api-2.8.0-SNAPSHOT.jar'))
    implementation(files('../exchange-platform-extension-libraries/cc.datafabric.platform.datalayer-pg-2.8.0-SNAPSHOT.jar'))
    implementation(files('../exchange-platform-extension-libraries/cc.datafabric.platform.datalayer-tools-2.8.0-SNAPSHOT.jar'))
    implementation(files('../exchange-platform-extension-libraries/cc.datafabric.platform.extensions-api-2.8.0-SNAPSHOT.jar'))
    implementation(files('../exchange-platform-extension-libraries/cc.datafabric.platform.extensions-service-2.8.0-SNAPSHOT.jar'))
    implementation(files('../exchange-platform-extension-libraries/cc.datafabric.platform.kafka-util-2.8.0-SNAPSHOT.jar'))
    implementation(files('../exchange-platform-extension-libraries/cc.datafabric.platform.services-2.8.0-SNAPSHOT.jar'))
    implementation(files('../exchange-platform-extension-libraries/cc.datafabric.platform.telemetry-2.8.0-SNAPSHOT.jar'))

    implementation(project(":exchange-platform-extension"))

    testImplementation(project(":exchange-platform-extension"))
    testImplementation("io.quarkus:quarkus-junit5")
    testImplementation("io.rest-assured:rest-assured")
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

test {
    useJUnitPlatform()
}

allOpen {
    annotation("javax.ws.rs.Path")
    annotation("javax.enterprise.context.ApplicationScoped")
    annotation("io.quarkus.test.junit.QuarkusTest")
}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
    kotlinOptions.javaParameters = true
}

compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
}

